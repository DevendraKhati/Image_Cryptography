package jvd;



import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author vikas
 */
public class finalde extends javax.swing.JFrame {
int  key []=new int[10];int c=0;
  int  key1 []=new int[10]; 
   int  key2 []=new int[10]; 
    String keyhex[]=new String[10];
    byte a;
    int i;
    String k456,binary567;
    double x0,x1,xi_1,xi,xinitial,x00,x11;
    BufferedImage image;


    /**
     * Creates new form finalde
     */
    public finalde() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(jButton1)
                .addContainerGap(183, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
   
  public void keychange()
 {    int temp[] =new int[10];
 
    for(int i=0;i<10;i++)
       {
           temp[i]=key[i];
       }
       for(int i=0;i<10;i=i+2)
       {
     key[i]=(int) (((2*temp[i])+temp[i+1])%255);
     key[i+1]=(int) ((temp[i]+temp[i+1])%255);
       }
       for(int i=0;i<10;i++)
       {   
           keyhex[i]=Integer.toHexString(key[i]);
       }
 }
  public static int xor(int dec,String hexa)
{
     
     int hexx = Integer.parseInt(hexa,16);
     int c= dec^hexx;
     return c; 
}
    public static String convertTobinary(int number) {
    String binString = Integer.toBinaryString(number);
    while (binString.length() < 8) {    //pad with 16 0's
    binString = "0" + binString;}
    return binString;
    }
    public static String not(String number) {
    char[] chars = new char[number.length()];
    for(int i = 0; i < number.length(); i++)
    chars[i] = (char) (number.charAt(i) ^ 1); // flip the bottom bit so 0=>1 and 1=>0
    String flipped = new String(chars);
    return flipped;
    }
    private String hexToBin(String hex){
    String bin = "";
    String binFragment = "";
    int iHex;
    hex = hex.trim();
    hex = hex.replaceFirst("0x", "");

    for(int i = 0; i < hex.length(); i++){
        iHex = Integer.parseInt(""+hex.charAt(i),16);
        binFragment = Integer.toBinaryString(iHex);

        while(binFragment.length() < 4){
            binFragment = "0" + binFragment;
        }
        bin += binFragment;
        
    }
    if(bin.length()<=4)
        {
            bin="0000"+bin;
        }  
    return bin;
}
    private void generateKey()
    {
    	try
        {
            for(i=0;i<10;i++)
                {
                    a=(byte)(128*Math.random());
                   // System.out.println(a);
                    key[i]=a;
                    String s =Integer.toHexString(a);
                   // System.out.println(s);
                    keyhex[i]=s;
               }
            for(int i=0;i<10;i++)
            {key1[i]=key[i];}
        //jLabel2.setText(keyhex[0]+""+keyhex[1]+""+keyhex[2]+""+keyhex[3]+""+keyhex[4]+""+keyhex[5]+""+keyhex[6]+""+keyhex[7]+""+keyhex[8]+""+keyhex[9]);
        }catch(Exception e)
        {
    }
    }
 public double initialcondition()
    {
              String k0= hexToBin(keyhex[0]);
              String k1= hexToBin(keyhex[1]);
              String k2= hexToBin(keyhex[2]);
              String k3= hexToBin(keyhex[3]);
              String k4= hexToBin(keyhex[4]);
              String k5= hexToBin(keyhex[5]);
              String k6= hexToBin(keyhex[6]);
              String k7= hexToBin(keyhex[7]);
              String k8= hexToBin(keyhex[8]);
              String k9= hexToBin(keyhex[9]);
              //System.out.println("KEY:"+k1+"-"+k2+"-"+k3+"-"+k4+"-"+k5+"-"+k6+"-"+k7+'-'+k8+"-"+k9);
              k456=k4+k5+k6;
               /*k567 hexadecimal to binary*/
               /*x1=k3 bit in binary*/
                //int k3 = Integer.parseInt(keyhex[3], 16);
              // String k_3 = Integer.toBinaryString(k3);
               String k_3=hexToBin(keyhex[3]);
               //System.out.println(k_3);
               double sum=0;
               for(i=0;i<k456.length();i++)
               {
                   if(k456.charAt(i)=='1')
                   {    
                       sum=sum+Math.pow(2,i);
                   }
               }
               //System.out.println(sum);
               x00=sum;
               x0=(x00/(Math.pow(2,24)));
                //System.out.println("x0="+x0);
              
                double k3sum=0;
               for(i=0;i<k_3.length();i++)
               {
                   if(k_3.charAt(i)=='1')
                   {    
                       k3sum=k3sum+Math.pow(2,i);
                   }
               }
                // System.out.println(k3sum);
               x11=k3sum;  
               x1=x11/96;
              // System.out.println("x1="+x1);
                xinitial=(x0+x1)%1;
              // System.out.println("xinitial="+xinitial);
                xi=(xinitial*193+0.6828*0)%1;
                xi_1=((3.569946)*(xi)*(1-xi));
              //  System.out.println("xi="+xi+" x(i+1)=  "+xi_1);
                return (double) xi_1;
                
    }
 public void getkey(int width,int height)
 {    int xx=0,x=0,y=0;
 for(int i=0;i<height+x;i++)
 {
     for(int j=0;j<width+y;j++)
     {
          if(xx==15)
                 {
                 keychange();
                 xx=0;
                 }
                 xx++;
     }
 }
     for(int m=0;m<10;m++)
     {
         key2[m]=key[m];
     }
 
 
 }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        { 
            int count =1;String s1,s2,s3;
            generateKey();
           
                //if (c==1)
               //path="/home/vikas/Desktop/encrypt.jpg";
            double bb;
            double st1 =0.10, st2 =0.13, st3 =0.34, st4 =0.37, st5 =0.58, st6 =0.62;
            double st7 =0.16, st8 =0.40, st9 =0.62, st10=0.66, st11 =0.19, st12=0.43;
            double st13=0.70, st14=0.22, st15=0.46, st16=0.74, st17=0.25, st18=0.49;
            double st19=0.78, st20=0.28, st21=0.52, st22=0.82, st23=0.31, st24=0.55;
            double st25=0.86, st26=0.31, st27=0.34, st28=0.58, st29=0.86, st30=0.90;
            
           // System.out.println("initialcond"+bb);
           File f=null;
         f= new File("/home/vikas/Desktop/4444.jpeg");
         int r,g,b,xx=1;
         image = ImageIO.read(f);
         int z=0;
        int width = image.getWidth();
        int height = image.getHeight();
         String red[]=new String[height*width];
         String green[]=new String[height*width];
         String blue[]=new String[height*width];
          for(int i=0;i<1;i++)
           {
         for(int ai=0; ai<height; ai++){
         for(int j=0; j<width; j++){
             
               Color c = new Color(image.getRGB(j, ai));
               r=c.getRed();
               g=c.getGreen();
               b=c.getBlue();
               bb=initialcondition();
           // System.out.println(count+"= |"+r+"|"+g+" |"+b);
             if(bb>=st1 && bb<st2 || bb>=st3 && bb<st4|| bb>=st5 && bb<st6)
            { 
               red[j]=convertTobinary(r);
               green[j]=convertTobinary(g);
               blue[j]=convertTobinary(b);
               red[j]=not(red[j]);
               green[j]=not(green[j]);
               blue[j]=not(blue[j]);
               r=Integer.parseInt(red[j],2);
               g=Integer.parseInt(green[j],2);
               b=Integer.parseInt(blue[j],2);
                //System.out.println(" 1:|"+r+"|"+g+" |"+b);
            }
            else if(bb>=st2 && bb<st7 || bb>=st4 && bb<st8|| bb>=st9 && bb<st10)
                    {
                     r=xor(r,keyhex[4]);
                     g=xor(g,keyhex[5]);
                     b=xor(b,keyhex[6]);
                  //   System.out.println(" 2:|"+r+"|"+g+" |"+b);
                    }
            else if(bb>=st7 && bb<st11 || bb>=st8 && bb<st12|| bb>=st10 && bb<st13)
                    {  
                       r=(((r+key[4])+key[5])%256);
                        g=(((g+key[5])+key[6])%256);
                        b=(((b+key[6])+key[4])%256);
                       // System.out.println("key4="+key[4]+"key5="+key[5]+"key[6]"+key[6]);
                       // System.out.println("3: |"+r+"|"+g+" |"+b); 
                         r=r;
                         g=g;
                         b=b;
                    }
            else if(bb>=st11 && bb<st14  || bb>=st12 && bb<st15|| bb>=st13 && bb<st16)
                    {
                       s1=not(convertTobinary(xor(r,keyhex[4])));
                       s2=not(convertTobinary(xor(g,keyhex[5])));
                       s3=not(convertTobinary(xor(b,keyhex[6])));
                       r=Integer.parseInt(s1,2);
                       g=Integer.parseInt(s2,2);
                       b=Integer.parseInt(s3,2);
                   // System.out.println("4:|"+r+"|"+g+" |"+b);
                    }
             else if(bb>=st14 && bb<st17 || bb>=st15 && bb<st18|| bb>=st16 && bb<st19)
                    {
                     r=xor(r,keyhex[7]);
                     g=xor(g,keyhex[8]);
                     b=xor(b,keyhex[9]);
                  //  System.out.println("5: |"+r+"|"+g+" |"+b);
                    }
            else if(bb>=st17 && bb<st20 || bb>=st18 && bb<st21|| bb>=st19 && bb<st22)
                    {   r=(((r+key[7])+key[8])%256);
                        g=(((g+key[8])+key[9])%256);
                        b=(((b+key[9])+key[7])%256);
                    //System.out.println("6: |"+r+"|"+g+" |"+b);
                      
                    }
            else if(bb>=st20 && bb<st26 || bb>=st21 && bb<st24|| bb>=st22 && bb<st25)
                    { 
                       s1=not(convertTobinary(xor(r,keyhex[7])));
                       s2=not(convertTobinary(xor(g,keyhex[8])));
                       s3=not(convertTobinary(xor(b,keyhex[9])));
                       r=Integer.parseInt(s1,2);
                       g=Integer.parseInt(s2,2);
                       b=Integer.parseInt(s3,2);
                    //System.out.println("7: |"+r+"|"+g+" |"+b);
                    }
            else if(bb>=st26 && bb<st27 || bb>=st24 && bb<st28 || bb>=st29 && bb<st30 )
                  {    
                    r=r;
                    g=g;
                    b=b;
                  }
                 if(xx==15)
                 {
                 keychange();
                 xx=0;
                 //System.out.println(count);
                 //for(i=0;i<10;i++)
              //  { System.out.print(key[i]+"|");
               // }
                count++;
                 }
                 //System.out.println();
                 xx++;
                 
                int p = (r<<16) | (g<<8) | b;
                image.setRGB(j, ai, p);
            }
          }
             xx=1;
            f = new File("/home/vikas/Desktop/encrypt.png");
            ImageIO.write(image,"png",f);
            System.out.println("Encryption Done=====================================================");
           }
           count=0;
           //getkey(width,height);
          for(int i=0;i<10;i++)
          {
              key[i]=key1[i];
          }
          for(i=0;i<10;i++)
                { System.out.print(key[i]+"|");
                }
           f= new File("/home/vikas/Desktop/encrypt.png");
         for(int i=0;i<1;i++)
           {
           image = ImageIO.read(f);
              for(int ai=0; ai<height; ai++){
         for(int j=0+z; j<width; j++){
               Color c = new Color(image.getRGB(j, ai));
               r=c.getRed();
               g=c.getGreen();
               b=c.getBlue();
                bb=initialcondition();
             if(bb>=st1 && bb<st2 || bb>=st3 && bb<st4|| bb>=st5 && bb<st6)
            {
                 red[j]=convertTobinary(r);
                 green[j]=convertTobinary(g);
                 blue[j]=convertTobinary(b);
                 red[j]=not(red[j]);
                 green[j]=not(green[j]);
                 blue[j]=not(blue[j]);
                 r=Integer.parseInt(red[j],2);
                 g=Integer.parseInt(green[j],2);
                 b=Integer.parseInt(blue[j],2);
               // System.out.println(count+": |"+r+"|"+g+" |"+b);
            }
            else if(bb>=st2 && bb<st7 || bb>=st4 && bb<st8|| bb>=st9 && bb<st10)
                    {
                     r= xor(r,keyhex[4]);
                     g= xor(g,keyhex[5]);
                     b= xor(b,keyhex[6]);
                 //   System.out.println(count+": |"+r+"|"+g+" |"+b);
                    }
            else if(bb>=st7 && bb<st11 || bb>=st8 && bb<st12|| bb>=st10 && bb<st13)
                    {  
                      
                       r = (((r  + 256) - key[4] - key[5])%256);
                       g = (((g  + 256) - key[5] - key[6])%256);
                       b = (((b  + 256) - key[6] - key[4])%256);
                      while(r<0)
                      {
                          r=r+256;
                      } while(g<0)
                      {
                          g=g+256;
                      } while(b<0)
                      {
                          b=b+256;
                      }
                    
                     }
            else if(bb>=st11 && bb<st14  || bb>=st12 && bb<st15|| bb>=st13 && bb<st16)
                    {
                     red[j]=convertTobinary(r);
                 green[j]=convertTobinary(g);
                 blue[j]=convertTobinary(b);
                  red[j]=not(red[j]);
                 green[j]=not(green[j]);
                 blue[j]=not(blue[j]);
                    r=Integer.parseInt(red[j],2);
                 g=Integer.parseInt(green[j],2);
                 b=Integer.parseInt(blue[j],2);
                 r=xor(r,keyhex[4]);
                     g=xor(g,keyhex[5]);
                     b=xor(b,keyhex[6]);
                     // System.out.println(count+" |"+r+"|"+g+" |"+b);
                    }
             else if(bb>=st14 && bb<st17 || bb>=st15 && bb<st18|| bb>=st16 && bb<st19)
                    {
                     r=xor(r,keyhex[7]);
                     g=xor(g,keyhex[8]);
                     b=xor(b,keyhex[9]);
                     //System.out.println(count+" |"+r+"|"+g+" |"+b);
                    }
            else if(bb>=st17 && bb<st20 || bb>=st18 && bb<st21|| bb>=st19 && bb<st22)
                    {   
                      //System.out.println(count+": |"+r+"|"+g+" |"+b);
                      int v=1;
                      r = (((r  + 256) - key[7] - key[8])%256);
                      g = (((g  + 256) - key[8] - key[9])%256);
                      b = (((b  + 256) - key[9] - key[7])%256);
                     while(r<0)
                      {
                          r=r+256;
                      } while(g<0)
                      {
                          g=g+256;
                      } while(b<0)
                      {
                          b=b+256;
                      }
                      
                    }
            else if(bb>=st20 && bb<st26 || bb>=st21 && bb<st24|| bb>=st22 && bb<st25)
                    { 
                      red[j]=convertTobinary(r);
                      green[j]=convertTobinary(g);
                      blue[j]=convertTobinary(b);
                      red[j]=not(red[j]);
                      green[j]=not(green[j]);
                      blue[j]=not(blue[j]);
                      r=Integer.parseInt(red[j],2);
                      g=Integer.parseInt(green[j],2);
                      b=Integer.parseInt(blue[j],2);
                      r=xor(r,keyhex[7]);
                      g=xor(g,keyhex[8]);
                      b=xor(b,keyhex[9]);
                      //System.out.println(count+" |"+r+"|"+g+" |"+b);
                    }
            else if(bb>=st26 && bb<st27 || bb>=st24 && bb<st28 || bb>=st29 && bb<st30 )
                  {    
                    r=r;
                    g=g;
                    b=b;
                  }
                if(xx==15)
                 {
                 keychange();
                 xx=0;
                 }
                 xx++;
                int p = (r<<16) | (g<<8) | b;
                image.setRGB(j, ai, p);
            }
          }
            f = new File("/home/vikas/Desktop/dencrypt.png");
            ImageIO.write(image,"png",f);
           }  
        }catch(Exception e)
        {            System.out.println(e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(finalde.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(finalde.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(finalde.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(finalde.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new finalde().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
